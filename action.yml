name: Run SAST on Docker images and upload a SARIF report to Defect Dojo.
description: |
  Utilizes Dockle to generate a SARIF report. The report is archived and uploaded to Defect Dojo.

  Uses https://github.com/kronostechnologies/standards/blob/master/bin/docker-sast.sh to normalize results.

inputs:
  aws-access-key-id:
    description: An AWS access key ID that has read permissions to the registry.
    required: false
    default: ''
  aws-secret-access-key:
    description: An AWS secret access key that has read permissions to the registry.
    required: false
    default: ''
  aws-region:
    description: AWS region for the registry.
    required: false
    default: ''
  defectdojo-engagement:
    description: "DefectDojo Engagement name or id"
    required: false
    default: ""
  defectdojo-publish:
    description: "Publish sarif report to Defect Dojo"
    required: false
    default: "false"
  defectdojo-token:
    description: "DefectDojo Token"
    required: false
    default: ""
  defectdojo-url:
    description: "DefectDojo URL"
    required: false
    default: ""
  image-name:
    description: The Docker image to run the checks on.
    required: true
  report-name:
    description: Override the default report name. This is useful for workflows that output multiple reports.
    required: false
    default: "docker-sast"
  report-retention-days:
    description: Duration in days to preserve reports.
    required: true
    default: "5"
  working-directory:
    description: Relative path under $GITHUB_WORKSPACE where the root project is located.
    required: false
    default: "."

runs:
  using: composite
  steps:
    - name: Action context
      id: context
      shell: bash
      run: |
        working_directory=$(realpath ${{ inputs.working-directory }})
        echo "::set-output name=working-directory::$working_directory"
        echo "::set-output name=sarif-file::build/sast/${{ inputs.report-name }}.sarif"
        echo "::set-output name=is-ecr::${{ inputs.aws-access-key-id != '' && inputs.aws-secret-access-key != '' && inputs.aws-region != '' }}"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      if: steps.context.outputs.is-ecr == 'true'
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v1
      if: steps.context.outputs.is-ecr == 'true'

    - name: Pull image
      shell: bash
      run: docker pull ${{ inputs.image-name }}

    - name: Docker SAST
      working-directory: ${{ steps.context.outputs.working-directory }}
      shell: bash
      run: |
        ${{ github.action_path }}/files/docker-sast.sh \
          -o "${{ steps.context.outputs.sarif-file }}" \
          "${{ inputs.image-name }}"

        result=$?
        if [ $result -ne 0 ]; then
          exit $result
        fi

    - uses: actions/upload-artifact@v3
      if: "!cancelled()"
      with:
        name: ${{ inputs.report-name }}.sarif
        path: ${{ steps.context.outputs.working-directory }}/${{ steps.context.outputs.sarif-file }}
        retention-days: ${{ inputs.report-retention-days }}

    - name: Publish report
      id: import-scan
      uses: ivanamat/defectdojo-import-scan@v1
      if: "!cancelled() && inputs.defectdojo-publish == 'true'"
      with:
        defectdojo_url: ${{ inputs.defectdojo-url }}
        engagement: ${{ inputs.defectdojo-engagement }}
        file: ${{ inputs.working-directory }}/${{ steps.context.outputs.sarif-file }}
        scan_type: SARIF
        token: ${{ inputs.defectdojo-token }}

    - name: Defect Dojo import result
      if: "!cancelled() && inputs.defectdojo-publish == 'true'"
      shell: bash
      run: |
        set -e
        printf '%s\n' '${{ steps.import-scan.outputs.response }}'
